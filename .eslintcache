[{"/Users/vasekmlejnsky/Developer/devbook/src/index.tsx":"1","/Users/vasekmlejnsky/Developer/devbook/src/serviceWorker.ts":"2","/Users/vasekmlejnsky/Developer/devbook/src/mainProcess/index.ts":"3","/Users/vasekmlejnsky/Developer/devbook/src/App/index.tsx":"4","/Users/vasekmlejnsky/Developer/devbook/src/Home/SearchInput.tsx":"5","/Users/vasekmlejnsky/Developer/devbook/src/Home/index.tsx":"6","/Users/vasekmlejnsky/Developer/devbook/src/Preferences/index.tsx":"7","/Users/vasekmlejnsky/Developer/devbook/src/Onboarding/index.tsx":"8","/Users/vasekmlejnsky/Developer/devbook/src/Home/HotkeysPanel/Hotkey.tsx":"9","/Users/vasekmlejnsky/Developer/devbook/src/Home/SearchItemFocusState.ts":"10","/Users/vasekmlejnsky/Developer/devbook/src/hooks/useIPCRenderer.ts":"11","/Users/vasekmlejnsky/Developer/devbook/src/Home/StackOverflow/StackOverflowModal.tsx":"12","/Users/vasekmlejnsky/Developer/devbook/src/Home/StackOverflow/StackOverflowItem.tsx":"13","/Users/vasekmlejnsky/Developer/devbook/src/Home/GitHub/CodeModal.tsx":"14","/Users/vasekmlejnsky/Developer/devbook/src/Home/GitHub/CodeItem.tsx":"15","/Users/vasekmlejnsky/Developer/devbook/src/components/Loader.tsx":"16","/Users/vasekmlejnsky/Developer/devbook/src/Preferences/Pages/GeneralPreferences.tsx":"17","/Users/vasekmlejnsky/Developer/devbook/src/Preferences/Pages/Integrations.tsx":"18","/Users/vasekmlejnsky/Developer/devbook/src/Onboarding/pages/Introduction.tsx":"19","/Users/vasekmlejnsky/Developer/devbook/src/Onboarding/pages/Shortcut.tsx":"20","/Users/vasekmlejnsky/Developer/devbook/src/Home/HotkeysPanel/index.ts":"21","/Users/vasekmlejnsky/Developer/devbook/src/hooks/useDebounce.ts":"22","/Users/vasekmlejnsky/Developer/devbook/src/Home/Docs/index.ts":"23","/Users/vasekmlejnsky/Developer/devbook/src/search/stackOverflow.ts":"24","/Users/vasekmlejnsky/Developer/devbook/src/search/gitHub.ts":"25","/Users/vasekmlejnsky/Developer/devbook/src/search/docs.ts":"26","/Users/vasekmlejnsky/Developer/devbook/src/components/Button.tsx":"27","/Users/vasekmlejnsky/Developer/devbook/src/Home/StackOverflow/StackOverflowBody.tsx":"28","/Users/vasekmlejnsky/Developer/devbook/src/Home/GitHub/Code.tsx":"29","/Users/vasekmlejnsky/Developer/devbook/src/Preferences/Pages/Base.tsx":"30","/Users/vasekmlejnsky/Developer/devbook/src/Home/HotkeysPanel/GitHubCode/ModalHotkeysPanel.tsx":"31","/Users/vasekmlejnsky/Developer/devbook/src/Home/HotkeysPanel/StackOverflow/SearchHotkeysPanel.tsx":"32","/Users/vasekmlejnsky/Developer/devbook/src/Home/HotkeysPanel/Docs/SearchHotkeysPanel.tsx":"33","/Users/vasekmlejnsky/Developer/devbook/src/Home/HotkeysPanel/StackOverflow/ModalHotkeysPanel.tsx":"34","/Users/vasekmlejnsky/Developer/devbook/src/Home/Docs/DocPage.tsx":"35","/Users/vasekmlejnsky/Developer/devbook/src/Home/Docs/SearchResultItem.tsx":"36","/Users/vasekmlejnsky/Developer/devbook/src/Home/Docs/DocsFilterModal.tsx":"37","/Users/vasekmlejnsky/Developer/devbook/src/Home/HotkeysPanel/GitHubCode/SearchHotkeysPanel.tsx":"38","/Users/vasekmlejnsky/Developer/devbook/src/components/Modal.tsx":"39","/Users/vasekmlejnsky/Developer/devbook/src/components/Select.tsx":"40","/Users/vasekmlejnsky/Developer/devbook/src/Home/HotkeysPanel/Panel.tsx":"41","/Users/vasekmlejnsky/Developer/devbook/src/hooks/useLockBodyScroll.ts":"42"},{"size":579,"mtime":1608735557785,"results":"43","hashOfConfig":"44"},{"size":5279,"mtime":1606213695804,"results":"45","hashOfConfig":"44"},{"size":3879,"mtime":1610389421369,"results":"46","hashOfConfig":"44"},{"size":1538,"mtime":1608217743389,"results":"47","hashOfConfig":"44"},{"size":7014,"mtime":1610389421353,"results":"48","hashOfConfig":"44"},{"size":45075,"mtime":1610399830180,"results":"49","hashOfConfig":"44"},{"size":3760,"mtime":1608040578710,"results":"50","hashOfConfig":"44"},{"size":2983,"mtime":1608040578704,"results":"51","hashOfConfig":"44"},{"size":4280,"mtime":1609164551606,"results":"52","hashOfConfig":"44"},{"size":83,"mtime":1608040578700,"results":"53","hashOfConfig":"44"},{"size":409,"mtime":1608735557785,"results":"54","hashOfConfig":"44"},{"size":5889,"mtime":1609675293595,"results":"55","hashOfConfig":"44"},{"size":6633,"mtime":1609107174998,"results":"56","hashOfConfig":"44"},{"size":3047,"mtime":1608217743390,"results":"57","hashOfConfig":"44"},{"size":3737,"mtime":1609107174996,"results":"58","hashOfConfig":"44"},{"size":1158,"mtime":1608040578711,"results":"59","hashOfConfig":"44"},{"size":2731,"mtime":1608454679720,"results":"60","hashOfConfig":"44"},{"size":3584,"mtime":1608454679721,"results":"61","hashOfConfig":"44"},{"size":2538,"mtime":1608040578705,"results":"62","hashOfConfig":"44"},{"size":3682,"mtime":1608454679719,"results":"63","hashOfConfig":"44"},{"size":453,"mtime":1609107174997,"results":"64","hashOfConfig":"44"},{"size":814,"mtime":1608040578729,"results":"65","hashOfConfig":"44"},{"size":182,"mtime":1609802039534,"results":"66","hashOfConfig":"44"},{"size":1065,"mtime":1608897439295,"results":"67","hashOfConfig":"44"},{"size":1267,"mtime":1608897439293,"results":"68","hashOfConfig":"44"},{"size":1146,"mtime":1610399717960,"results":"69","hashOfConfig":"44"},{"size":856,"mtime":1608040578711,"results":"70","hashOfConfig":"44"},{"size":3134,"mtime":1610389421358,"results":"71","hashOfConfig":"44"},{"size":7691,"mtime":1608079509856,"results":"72","hashOfConfig":"44"},{"size":630,"mtime":1608040578708,"results":"73","hashOfConfig":"44"},{"size":1166,"mtime":1608897439285,"results":"74","hashOfConfig":"44"},{"size":829,"mtime":1608897439287,"results":"75","hashOfConfig":"44"},{"size":2142,"mtime":1609802039535,"results":"76","hashOfConfig":"44"},{"size":905,"mtime":1608897439287,"results":"77","hashOfConfig":"44"},{"size":15164,"mtime":1610405250737,"results":"78","hashOfConfig":"44"},{"size":2197,"mtime":1609540016648,"results":"79","hashOfConfig":"44"},{"size":8533,"mtime":1610389421350,"results":"80","hashOfConfig":"44"},{"size":1093,"mtime":1608897439286,"results":"81","hashOfConfig":"44"},{"size":1455,"mtime":1608040578712,"results":"82","hashOfConfig":"44"},{"size":287,"mtime":1608040578713,"results":"83","hashOfConfig":"44"},{"size":2259,"mtime":1609164551607,"results":"84","hashOfConfig":"44"},{"size":343,"mtime":1608040578731,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"z4jise",{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"88"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"88"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"88"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/vasekmlejnsky/Developer/devbook/src/index.tsx",[],["174","175"],"/Users/vasekmlejnsky/Developer/devbook/src/serviceWorker.ts",[],"/Users/vasekmlejnsky/Developer/devbook/src/mainProcess/index.ts",[],"/Users/vasekmlejnsky/Developer/devbook/src/App/index.tsx",[],"/Users/vasekmlejnsky/Developer/devbook/src/Home/SearchInput.tsx",[],"/Users/vasekmlejnsky/Developer/devbook/src/Home/index.tsx",["176","177","178"],"import React, {\n  useRef,\n  useEffect,\n  useCallback,\n  useReducer,\n  useMemo,\n} from 'react';\nimport styled from 'styled-components';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { Resizable } from 're-resizable';\n\nimport electron, {\n  isDev,\n  hideMainWindow,\n  connectGitHub, openLink, createTmpFile,\n  trackModalOpened,\n  trackSearch,\n  trackShortcut,\n  saveSearchQuery,\n  getSavedSearchQuery,\n  saveSearchFilter,\n  getSavedSearchFilter,\n  saveDocSearchResultsDefaultWidth,\n  getDocSearchResultsDefaultWidth,\n  saveDocSources,\n  getCachedDocSources,\n} from 'mainProcess';\nimport useDebounce from 'hooks/useDebounce';\nimport {\n  search as searchStackOverflow,\n  StackOverflowResult,\n} from 'search/stackOverflow';\nimport {\n  searchCode as searchGitHubCode,\n  CodeResult,\n  init as initGitHub,\n  disconnect as disconnectGitHub,\n  FilePreview,\n} from 'search/gitHub';\nimport {\n  search as searchDocumentations,\n  fetchDocSources,\n  DocResult,\n  DocSource,\n} from 'search/docs';\nimport useIPCRenderer from 'hooks/useIPCRenderer';\nimport Button from 'components/Button';\n\nimport SearchInput, { ResultsFilter } from './SearchInput';\nimport {\n  StackOverflowSearchHotkeysPanel,\n  StackOverflowModalHotkeysPanel,\n  GitHubCodeSearchHotkeysPanel,\n  GitHubCodeModalHotkeysPanel,\n  DocsSearchHotkeysPanel,\n} from './HotkeysPanel';\nimport FocusState from './SearchItemFocusState';\nimport StackOverflowModal from './StackOverflow/StackOverflowModal';\nimport StackOverflowItem from './StackOverflow/StackOverflowItem';\nimport CodeItem from './GitHub/CodeItem';\nimport CodeModal from './GitHub/CodeModal';\nimport {\n  DocSearchResultItem,\n  DocPage,\n  DocsFilterModal,\n} from './Docs';\n\nconst Container = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst SearchResultsWrapper = styled.div`\n  padding: 10px 15px;\n  width: 100%;\n\n  overflow: hidden;\n  overflow-y: overlay;\n`;\n\nconst InfoMessage = styled.div`\n  margin: 100px auto 0;\n\n  color: #5A5A6F;\n  font-size: 16px;\n  font-weight: 600;\n`;\n\nconst GitHubConnect = styled.div`\n  margin: 100px auto 0;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n`;\n\nconst ConnectGitHubButton = styled(Button)`\n  margin-bottom: 15px;\n  padding: 10px 20px;\n\n  font-size: 15px;\n  font-weight: 500;\n\n  border-radius: 5px;\n`;\n\nconst GitHubConnectTitle = styled(InfoMessage)`\n  margin: 0 0 30px;\n`;\n\nconst EnableDocSourcesButton = styled(Button)`\n  margin: 15px 0;\n  padding: 10px 20px;\n\n  font-size: 15px;\n  font-weight: 500;\n\n  border-radius: 5px;\n`;\n\nconst DocsWrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: flex-start;\n  overflow: hidden;\n`;\n\nconst DocSearchResults = styled.div`\n  width: 100%;\n  height: 100%;\n\n  padding: 10px 0 20px;\n  margin: 0;\n\n  display: flex;\n  flex-direction: column;\n\n  overflow: hidden;\n  overflow-y: overlay;\n\n  border-right: 2px solid #3B3A4A;\n  background: #262736;\n`;\n\ntype SearchResultItem = StackOverflowResult | CodeResult | DocResult;\ntype SearchResultItems = StackOverflowResult[] | CodeResult[] | DocResult[];\ntype SearchResults = {\n  [key in ResultsFilter]: {\n    items: SearchResultItems;\n    isLoading: boolean;\n    scrollTopPosition: number;\n    focusedIdx: {\n      idx: number;\n      focusState: FocusState;\n    };\n  }\n}\n\nenum ReducerActionType {\n  SetSearchQuery,\n  SetSearchFilter,\n\n  CacheScrollTopPosition,\n  ClearResults,\n\n  StartSearching,\n  SearchingSuccess,\n  SearchingFail,\n\n  FocusResultItem,\n\n  // StackOverflow + GitHubCode modal.\n  OpenModal,\n  CloseModal,\n\n  StartConnectingGitHub,\n  ConnectingGitHubSuccess,\n  ConnectingGitHubFail,\n  DisconnectGitHubAccount,\n\n  SetDocSearchResultsDefaultWidth,\n  CacheDocSearchResultsWidth,\n\n  SearchInDocPage,\n  CancelSearchInDocPage,\n\n  OpenDocsFilterModal,\n  CloseDocsFilterModal,\n\n  FetchDocSourcesSuccess,\n  FetchDocSourcesFail,\n\n  IncludeDocSourceInSearch,\n  RemoveDocSourceFromSearch,\n\n  SetIsLoadingCachedData,\n}\n\ninterface SetSearchQuery {\n  type: ReducerActionType.SetSearchQuery;\n  payload: {\n    query: string;\n  };\n}\n\ninterface SetSearchFilter {\n  type: ReducerActionType.SetSearchFilter;\n  payload: {\n    filter: ResultsFilter;\n  };\n}\n\ninterface CacheScrollTopPosition {\n  type: ReducerActionType.CacheScrollTopPosition;\n  payload: {\n    filter: ResultsFilter;\n    scrollTopPosition: number;\n  };\n}\n\ninterface ClearResults {\n  type: ReducerActionType.ClearResults;\n}\n\ninterface StartSearching {\n  type: ReducerActionType.StartSearching;\n  payload: {\n    filter: ResultsFilter;\n  };\n}\n\ninterface SearchingSuccess {\n  type: ReducerActionType.SearchingSuccess;\n  payload: {\n    filter: ResultsFilter;\n    items: SearchResultItems;\n  };\n}\n\ninterface SearchingFail {\n  type: ReducerActionType.SearchingFail;\n  payload: {\n    filter: ResultsFilter;\n    errorMessage: string;\n  };\n}\n\ninterface FocusResultItem {\n  type: ReducerActionType.FocusResultItem;\n  payload: {\n    filter: ResultsFilter;\n    idx: number;\n    focusState: FocusState;\n  };\n}\n\ninterface OpenModal {\n  type: ReducerActionType.OpenModal;\n  payload: {\n    item: SearchResultItem;\n  };\n}\n\ninterface CloseModal {\n  type: ReducerActionType.CloseModal;\n}\n\ninterface StartConnectingGitHub {\n  type: ReducerActionType.StartConnectingGitHub;\n}\n\ninterface ConnectingGitHubSuccess {\n  type: ReducerActionType.ConnectingGitHubSuccess;\n}\n\ninterface ConnectingGitHubFail {\n  type: ReducerActionType.ConnectingGitHubFail;\n  payload: {\n    errorMessage: string;\n  };\n}\n\ninterface DisconnectGitHubAccount {\n  type: ReducerActionType.DisconnectGitHubAccount;\n}\n\ninterface SetDocSearchResultsDefaultWidth {\n  type: ReducerActionType.SetDocSearchResultsDefaultWidth;\n  payload: {\n    width: number;\n  };\n}\n\ninterface CacheDocSearchResultsWidth {\n  type: ReducerActionType.CacheDocSearchResultsWidth;\n  payload: {\n    width: number;\n  };\n}\n\ninterface SearchInDocPage {\n  type: ReducerActionType.SearchInDocPage;\n}\n\ninterface CancelSearchInDocPage {\n  type: ReducerActionType.CancelSearchInDocPage;\n}\n\ninterface OpenDocsFilterModal {\n  type: ReducerActionType.OpenDocsFilterModal;\n}\n\ninterface CloseDocsFilterModal {\n  type: ReducerActionType.CloseDocsFilterModal;\n}\n\ninterface FetchDocSourcesSuccess {\n  type: ReducerActionType.FetchDocSourcesSuccess;\n  payload: { docSources: DocSource[] };\n}\n\ninterface FetchDocSourcesFail {\n  type: ReducerActionType.FetchDocSourcesFail;\n  payload: { errorMessage: string };\n}\n\ninterface IncludeDocSourceInSearch {\n  type: ReducerActionType.IncludeDocSourceInSearch;\n  payload: { docSource: DocSource };\n}\n\ninterface RemoveDocSourceFromSearch {\n  type: ReducerActionType.RemoveDocSourceFromSearch;\n  payload: { docSource: DocSource };\n}\n\ninterface SetIsLoadingCachedData {\n  type: ReducerActionType.SetIsLoadingCachedData;\n  payload: { isLoadingCachedData: boolean };\n}\n\ntype ReducerAction = SetSearchQuery\n  | SetSearchFilter\n  | CacheScrollTopPosition\n  | ClearResults\n  | StartSearching\n  | SearchingSuccess\n  | SearchingFail\n  | FocusResultItem\n  | OpenModal\n  | CloseModal\n  | StartConnectingGitHub\n  | ConnectingGitHubSuccess\n  | ConnectingGitHubFail\n  | DisconnectGitHubAccount\n  | SetDocSearchResultsDefaultWidth\n  | CacheDocSearchResultsWidth\n  | SearchInDocPage\n  | CancelSearchInDocPage\n  | OpenDocsFilterModal\n  | CloseDocsFilterModal\n  | FetchDocSourcesSuccess\n  | FetchDocSourcesFail\n  | IncludeDocSourceInSearch\n  | RemoveDocSourceFromSearch\n  | SetIsLoadingCachedData;\n\ninterface State {\n  search: {\n    query: string;\n    lastSearchedQuery: string;\n    filter: ResultsFilter;\n  };\n  results: SearchResults;\n  modalItem: SearchResultItem | undefined;\n  gitHubAccount: {\n    isLoading: boolean;\n    isConnected: boolean;\n  },\n  errorMessage: string;\n  layout: {\n    docSearchResultsDefaultWidth: number;\n  }\n  isSearchingInDocPage: boolean;\n  isDocsFilterModalOpened: boolean;\n  docSources: DocSource[];\n  isLoadingCachedData: boolean;\n}\n\nconst initialState: State = {\n  search: {\n    query: '',\n    lastSearchedQuery: '',\n    // TODO: Since we load the last saved search query we should also load\n    // the last saved results filter.\n    filter: ResultsFilter.StackOverflow,\n  },\n  results: {\n    [ResultsFilter.StackOverflow]: {\n      items: [],\n      isLoading: true,\n      scrollTopPosition: 0,\n      focusedIdx: {\n        idx: 0,\n        focusState: FocusState.NoScroll,\n      },\n    },\n    [ResultsFilter.GitHubCode]: {\n      items: [],\n      isLoading: true,\n      scrollTopPosition: 0,\n      focusedIdx: {\n        idx: 0,\n        focusState: FocusState.NoScroll,\n      },\n    },\n    [ResultsFilter.Docs]: {\n      items: [],\n      isLoading: true,\n      scrollTopPosition: 0,\n      focusedIdx: {\n        idx: 0,\n        focusState: FocusState.NoScroll,\n      },\n    },\n  },\n  modalItem: undefined,\n  gitHubAccount: {\n    isLoading: false,\n    isConnected: false,\n  },\n  errorMessage: '',\n  layout: {\n    docSearchResultsDefaultWidth: 200,\n  },\n  isSearchingInDocPage: false,\n  isDocsFilterModalOpened: false,\n  docSources: [],\n  isLoadingCachedData: true,\n}\n\nfunction stateReducer(state: State, reducerAction: ReducerAction): State {\n  if (isDev) {\n    console.log(ReducerActionType[reducerAction.type], (reducerAction as any).payload || {}, state);\n  }\n\n  switch (reducerAction.type) {\n    case ReducerActionType.SetSearchQuery: {\n      const { query } = reducerAction.payload;\n      return {\n        ...state,\n        search: {\n          ...state.search,\n          query,\n        },\n      };\n    }\n    case ReducerActionType.ClearResults: {\n      const emptyResults = initialState.results;\n      // Initial state has the 'isLoading' field set to 'true'\n      // for each result filter. We want to set it to 'false'.\n      Object.keys(emptyResults).forEach(k => {\n        (emptyResults[k as ResultsFilter] as any).isLoading = false;\n      });\n\n      return {\n        ...state,\n        search: {\n          ...state.search,\n          query: '',\n          lastSearchedQuery: '',\n        },\n        results: {\n          ...emptyResults,\n        },\n      };\n    }\n    case ReducerActionType.CacheScrollTopPosition: {\n      const { filter, scrollTopPosition } = reducerAction.payload;\n      return {\n        ...state,\n        results: {\n          ...state.results,\n          [filter]: {\n            ...state.results[filter],\n            scrollTopPosition,\n          },\n        },\n      };\n    }\n    case ReducerActionType.SetSearchFilter: {\n      const { filter } = reducerAction.payload;\n      return {\n        ...state,\n        search: {\n          ...state.search,\n          filter,\n        },\n        // TODO: https://github.com/DevbookHQ/devbook/issues/7\n        /*\n        results: {\n          ...state.results,\n          [filter]: {\n            ...state.results[filter],\n            focusedIdx: {\n              ...state.results[filter].focusedIdx,\n              // We want to disable automatic scrolling to the focused\n              // element. When a user is changing filters we should\n              // respect the cached scroll position instead. This position\n              // might be different then the position of a focused element.\n              state: FocusState.NoScroll,\n            },\n          },\n        },\n        */\n      };\n    }\n    case ReducerActionType.StartSearching: {\n      const { filter } = reducerAction.payload;\n      return {\n        ...state,\n        results: {\n          ...state.results,\n          [filter]: {\n            ...state.results[filter],\n            items: [],\n            isLoading: true,\n          },\n        },\n      };\n    }\n    case ReducerActionType.SearchingSuccess: {\n      const { filter, items } = reducerAction.payload;\n      return {\n        ...state,\n        search: {\n          ...state.search,\n          lastSearchedQuery: state.search.query,\n        },\n        results: {\n          ...state.results,\n          [filter]: {\n            ...state.results[filter],\n            isLoading: false,\n            items,\n            focusedIdx: {\n              ...state.results[filter].focusedIdx,\n              idx: 0,\n              state: FocusState.NoScroll,\n            },\n          },\n        },\n      };\n    }\n    case ReducerActionType.SearchingFail: {\n      const { filter, errorMessage } = reducerAction.payload;\n      return {\n        ...state,\n        errorMessage,\n        results: {\n          ...state.results,\n          [filter]: {\n            ...state.results[filter],\n            isLoading: false,\n            items: [],\n          },\n        },\n      };\n    }\n    case ReducerActionType.FocusResultItem: {\n      const { filter, idx, focusState } = reducerAction.payload;\n      return {\n        ...state,\n        results: {\n          ...state.results,\n          [filter]: {\n            ...state.results[filter],\n            focusedIdx: {\n              ...state.results[filter].focusedIdx,\n              idx,\n              focusState,\n            },\n          },\n        },\n      };\n    }\n    case ReducerActionType.OpenModal: {\n      const { item } = reducerAction.payload;\n      return {\n        ...state,\n        modalItem: item,\n      };\n    }\n    case ReducerActionType.CloseModal: {\n      return {\n        ...state,\n        modalItem: undefined,\n      };\n    }\n    case ReducerActionType.StartConnectingGitHub: {\n      return {\n        ...state,\n        gitHubAccount: {\n          ...state.gitHubAccount,\n          isLoading: true,\n          isConnected: false,\n        },\n      };\n    }\n    case ReducerActionType.ConnectingGitHubSuccess: {\n      return {\n        ...state,\n        gitHubAccount: {\n          ...state.gitHubAccount,\n          isLoading: false,\n          isConnected: true,\n        },\n      };\n    }\n    case ReducerActionType.ConnectingGitHubFail: {\n      const { errorMessage } = reducerAction.payload;\n      return {\n        ...state,\n        errorMessage,\n        gitHubAccount: {\n          ...state.gitHubAccount,\n          isLoading: false,\n          isConnected: false,\n        },\n      };\n    }\n    case ReducerActionType.DisconnectGitHubAccount: {\n      return {\n        ...state,\n        gitHubAccount: {\n          ...state.gitHubAccount,\n          isLoading: false,\n          isConnected: false,\n        },\n      };\n    }\n    case ReducerActionType.SetDocSearchResultsDefaultWidth: {\n      const { width } = reducerAction.payload;\n      return {\n        ...state,\n        layout: {\n          ...state.layout,\n          docSearchResultsDefaultWidth: width,\n        },\n      };\n    }\n    case ReducerActionType.CacheDocSearchResultsWidth: {\n      // TODO: Should this be a reducer action?\n      // It feels wrong to not do anything with the state\n      // and just return it as it is.\n      const { width } = reducerAction.payload;\n      saveDocSearchResultsDefaultWidth(width);\n      return { ...state };\n    }\n    case ReducerActionType.SearchInDocPage: {\n      return {\n        ...state,\n        isSearchingInDocPage: true,\n      };\n    }\n    case ReducerActionType.CancelSearchInDocPage: {\n      return {\n        ...state,\n        isSearchingInDocPage: false,\n      };\n    }\n    case ReducerActionType.OpenDocsFilterModal: {\n      return {\n        ...state,\n        isDocsFilterModalOpened: true,\n      };\n    }\n    case ReducerActionType.CloseDocsFilterModal: {\n      return {\n        ...state,\n        isDocsFilterModalOpened: false,\n      };\n    }\n    case ReducerActionType.FetchDocSourcesSuccess: {\n      const { docSources } = reducerAction.payload;\n      return {\n        ...state,\n        docSources,\n      };\n    }\n    case ReducerActionType.FetchDocSourcesFail: {\n      const { errorMessage } = reducerAction.payload;\n      return {\n        ...state,\n        errorMessage,\n      };\n    }\n    case ReducerActionType.IncludeDocSourceInSearch: {\n      const { docSource } = reducerAction.payload;\n      return {\n        ...state,\n        docSources: state.docSources.map(ds => ds.slug === docSource.slug ? { ...ds, isIncludedInSearch: true } : ds),\n      };\n    }\n    case ReducerActionType.RemoveDocSourceFromSearch: {\n      const { docSource } = reducerAction.payload;\n      return {\n        ...state,\n        docSources: state.docSources.map(ds => ds.slug === docSource.slug ? { ...ds, isIncludedInSearch: false } : ds),\n      };\n    }\n    case ReducerActionType.SetIsLoadingCachedData: {\n      const { isLoadingCachedData } = reducerAction.payload;\n      return {\n        ...state,\n        isLoadingCachedData,\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nfunction Home() {\n  const docPageSearchInputRef = useRef<HTMLInputElement>(null);\n  const [state, dispatch] = useReducer(stateReducer, initialState);\n\n  const debouncedQuery = useDebounce(state.search.query.trim(), 400);\n  const debouncedLastSearchedQuery = useDebounce(state.search.lastSearchedQuery.trim(), 400);\n\n  const activeFilter = useMemo(() => state.search.filter, [state.search.filter]);\n\n  const activeFocusedIdx = useMemo(() => {\n    return state.results[activeFilter].focusedIdx;\n  }, [state.results, activeFilter]);\n\n  const activeFocusedItem = useMemo(() => {\n    return state.results[activeFilter].items[activeFocusedIdx.idx];\n  }, [state.results, activeFilter, activeFocusedIdx]);\n\n  const hasActiveFilterEmptyResults = useMemo(() => {\n    return state.results[activeFilter].items.length === 0;\n  }, [state.results, activeFilter]);\n\n  const isActiveFilterLoading = useMemo(() => {\n    return state.results[activeFilter].isLoading;\n  }, [state.results, activeFilter]);\n\n  const isAnyDocSourceIncluded = useMemo(() => {\n    return state.docSources.findIndex(ds => ds.isIncludedInSearch) !== -1;\n  }, [state.docSources]);\n\n  // Dispatch helpers\n  const setSearchQuery = useCallback((query: string) => {\n    dispatch({\n      type: ReducerActionType.SetSearchQuery,\n      payload: { query },\n    });\n  }, []);\n\n  const cacheScrollTopPosition = useCallback((filter: ResultsFilter, scrollTopPosition: number) => {\n    dispatch({\n      type: ReducerActionType.CacheScrollTopPosition,\n      payload: { filter, scrollTopPosition },\n    });\n  }, []);\n\n  const clearResults = useCallback(() => {\n    dispatch({\n      type: ReducerActionType.ClearResults,\n    });\n  }, []);\n\n  const startSearching = useCallback((filter: ResultsFilter) => {\n    dispatch({\n      type: ReducerActionType.StartSearching,\n      payload: { filter },\n    });\n  }, []);\n\n  const searchingSuccess = useCallback((filter: ResultsFilter, items: SearchResultItems) => {\n   dispatch({\n     type: ReducerActionType.SearchingSuccess,\n     payload: { filter, items },\n   });\n  }, []);\n\n  const searchingFail = useCallback((filter: ResultsFilter, errorMessage: string) => {\n   dispatch({\n     type: ReducerActionType.SearchingFail,\n     payload: { filter, errorMessage },\n   });\n  }, []);\n\n  const focusResultItem = useCallback((filter: ResultsFilter, idx: number, focusState: FocusState) => {\n   dispatch({\n     type: ReducerActionType.FocusResultItem,\n     payload: { filter, idx, focusState },\n   });\n  }, []);\n\n  const setSearchFilter = useCallback((filter: ResultsFilter) => {\n    // TODO: Save the scroll bar's position and load it later.\n    // https://github.com/DevbookHQ/devbook/issues/7\n    /*\n    if (searchResultsWrapperEl?.current) {\n      // Cache the scroll bar position for the current active filter.\n      const currentScrollTop = searchResultsWrapperEl.current.scrollTop;\n      console.log('CURRENT', currentScrollTop);\n      cacheScrollTopPosition(state.search.filter, currentScrollTop);\n\n      // Set the scroll bar position for the filter that a user wants\n      // to set as an active.\n      const newScrollTop = state.results[filter].scrollTopPosition;\n      searchResultsWrapperEl.current.scrollTo(0, newScrollTop);\n    }\n    */\n\n    dispatch({\n      type: ReducerActionType.SetSearchFilter,\n      payload: { filter },\n    });\n\n    // Temporary solution that sets scrollbar's position to the currently\n    // focused item for the given filter.\n    const idx = state.results[filter].focusedIdx.idx;\n    focusResultItem(filter, idx, FocusState.WithScroll);\n\n    cancelSearchInDocPage();\n  }, [state.results, focusResultItem]);\n\n  const openModal = useCallback((item: SearchResultItem) => {\n    let url = '';\n    // TODO: This isn't a very good differentiation.\n    // Can we do it better in a more TypeScript way?\n    if ((item as StackOverflowResult).question) {\n      // Item is StackOverflowResult.\n      url = (item as StackOverflowResult).question.link;\n    } else if ((item as CodeResult).fileURL) {\n      // Item is CodeResult.\n      url = (item as CodeResult).fileURL;\n    }\n    trackModalOpened({\n      activeFilter: activeFilter.toString(),\n      url,\n    });\n    dispatch({\n      type: ReducerActionType.OpenModal,\n      payload: { item },\n    });\n  }, [activeFilter]);\n\n  const closeModal = useCallback(() => {\n    dispatch({\n      type: ReducerActionType.CloseModal,\n    });\n  }, []);\n\n  const startConnectingGitHub = useCallback(() => {\n    dispatch({\n      type: ReducerActionType.StartConnectingGitHub,\n    });\n  }, []);\n\n  const connectingGitHubSuccess = useCallback(() => {\n    dispatch({\n      type: ReducerActionType.ConnectingGitHubSuccess,\n    });\n  }, []);\n\n  const connectingGitHubFail = useCallback((errorMessage: string) => {\n    dispatch({\n      type: ReducerActionType.ConnectingGitHubFail,\n      payload: { errorMessage },\n    });\n  }, []);\n\n  const disconnectGitHubAccount = useCallback(() => {\n    dispatch({\n      type: ReducerActionType.DisconnectGitHubAccount,\n    });\n  }, []);\n\n  const setDocSearchResultsDefaultWidth = useCallback((width: number) => {\n    dispatch({\n      type: ReducerActionType.SetDocSearchResultsDefaultWidth,\n      payload: { width },\n    });\n  }, []);\n\n  const cacheDocSearchResultsWidth = useCallback((width: number) => {\n    dispatch({\n      type: ReducerActionType.CacheDocSearchResultsWidth,\n      payload: { width },\n    });\n  }, []);\n\n  const searchInDocPage = useCallback(() => {\n    dispatch({\n      type: ReducerActionType.SearchInDocPage,\n    });\n  }, []);\n\n  const cancelSearchInDocPage = useCallback(() => {\n    dispatch({\n      type: ReducerActionType.CancelSearchInDocPage,\n    });\n  }, []);\n\n  const openDocsFilterModal = useCallback(() => {\n    dispatch({\n      type: ReducerActionType.OpenDocsFilterModal,\n    });\n  }, []);\n\n  const closeDocsFilterModal = useCallback(() => {\n    dispatch({\n      type: ReducerActionType.CloseDocsFilterModal,\n    });\n  }, []);\n\n  const fetchDocSourcesSuccess = useCallback((docSources: DocSource[]) => {\n    dispatch({\n      type: ReducerActionType.FetchDocSourcesSuccess,\n      payload: { docSources },\n    });\n  }, []);\n\n  const fetchDocSourcesFail = useCallback((errorMessage: string) => {\n    dispatch({\n      type: ReducerActionType.FetchDocSourcesFail,\n      payload: { errorMessage },\n    });\n  }, []);\n\n  const includeDocSourceInSearch = useCallback((docSource: DocSource) => {\n    dispatch({\n      type: ReducerActionType.IncludeDocSourceInSearch,\n      payload: { docSource },\n    });\n  }, []);\n\n  const removeDocSourceFromSearch = useCallback((docSource: DocSource) => {\n    dispatch({\n      type: ReducerActionType.RemoveDocSourceFromSearch,\n      payload: { docSource },\n    });\n  }, []);\n\n  const setIsLoadingCachedData = useCallback((isLoadingCachedData: boolean) => {\n    dispatch({\n      type: ReducerActionType.SetIsLoadingCachedData,\n      payload: { isLoadingCachedData },\n    });\n  }, []);\n  /////////\n\n  const openFocusedSOItemInBrowser = useCallback(() => {\n    const idx = state.results[ResultsFilter.StackOverflow].focusedIdx.idx;\n    const item = state.results[ResultsFilter.StackOverflow].items[idx] as StackOverflowResult;\n    if (item) openLink(item.question.link);\n  }, [state.results]);\n\n  const openFocusedGitHubCodeItemInVSCode = useCallback(() => {\n    const idx = state.results[ResultsFilter.GitHubCode].focusedIdx.idx;\n    const item = state.results[ResultsFilter.GitHubCode].items[idx] as CodeResult;\n    if (!item) return;\n    openFileInVSCode(item.filePath, item.fileContent, item.filePreviews);\n  }, [state.results]);\n\n  function openFocusedGitHubCodeItemInBrowser() {\n    const idx = state.results[ResultsFilter.GitHubCode].focusedIdx.idx\n    const item = state.results[ResultsFilter.GitHubCode].items[idx] as CodeResult;\n    const firstPreview = item?.filePreviews[0];\n    const gitHubFileURL = firstPreview ? `${item.fileURL}#L${firstPreview.startLine + 3}` : item?.fileURL;\n    if (gitHubFileURL) openLink(gitHubFileURL);\n  }\n\n  // TODO: Create a reducer action.\n  async function openFileInVSCode(path: string, content: string, filePreviews: FilePreview[]) {\n    const tmpPath = await createTmpFile({\n      filePath: path,\n      fileContent: content,\n    });\n    if (tmpPath) {\n      const firstPreview = filePreviews[0];\n      const vscodeFileURL = firstPreview ? `vscode://file/${tmpPath}:${firstPreview.startLine + 3}` : `vscode://file/${tmpPath}`;\n      await openLink(vscodeFileURL);\n    } else {\n      // TODO: Handle error for user.\n      console.error('Cannot create tmp file with the file content.')\n    }\n  }\n\n  async function searchGHCode(query: string) {\n    try {\n      startSearching(ResultsFilter.GitHubCode);\n      const results = await searchGitHubCode(query);\n      searchingSuccess(ResultsFilter.GitHubCode, results);\n    } catch (error) {\n      searchingFail(ResultsFilter.GitHubCode, error.message);\n    }\n  }\n\n  async function searchSO(query: string) {\n    try {\n      startSearching(ResultsFilter.StackOverflow);\n      const results = await searchStackOverflow(query);\n      searchingSuccess(ResultsFilter.StackOverflow, results);\n    } catch (error) {\n      searchingFail(ResultsFilter.StackOverflow, error.message);\n    }\n  }\n\n  async function searchDocs(query: string, docSources: DocSource[]) {\n    // User has all doc sources unincluded.\n    if (docSources.findIndex(ds => ds.isIncludedInSearch) === -1) {\n      searchingSuccess(ResultsFilter.Docs, []);\n      return;\n    }\n\n    try {\n      startSearching(ResultsFilter.Docs);\n      const results = await searchDocumentations(query, docSources.filter(ds => ds.isIncludedInSearch));\n      searchingSuccess(ResultsFilter.Docs, results);\n    } catch (error) {\n      searchingFail(ResultsFilter.Docs, error.message);\n    }\n  }\n\n  async function searchAll(query: string, filter: ResultsFilter, isGitHubConnected: boolean, docSources: DocSource[]) {\n    switch (filter) {\n      case ResultsFilter.StackOverflow:\n        await searchSO(query);\n        await searchDocs(query, docSources);\n        if (isGitHubConnected) {\n          await searchGHCode(query);\n        }\n      break;\n\n      case ResultsFilter.GitHubCode:\n        if (isGitHubConnected) {\n          await searchGHCode(query);\n        }\n        await searchSO(query);\n        await searchDocs(query, docSources);\n      break;\n\n      case ResultsFilter.Docs:\n        await searchDocs(query, docSources);\n        await searchSO(query);\n        if (isGitHubConnected) {\n          await searchGHCode(query);\n        }\n      break;\n    }\n  }\n\n  async function tryToLoadGitHubAccount() {\n    try {\n      startConnectingGitHub();\n      await initGitHub();\n      connectingGitHubSuccess();\n    } catch (error) {\n      connectingGitHubFail(`GitHub account either isn't connected or there was an error loading credentials. ${error.message}`);\n    }\n  }\n\n  function handleSearchInputChange(e: any) {\n    // User explicitely deleted the query. We should remove all results.\n    if (!e.target.value) {\n      clearResults();\n      return;\n    }\n    setSearchQuery(e.target.value);\n  }\n\n  function handleDocSearchResultsResizeStop(e: any, dir: any, elRef: HTMLElement) {\n    cacheDocSearchResultsWidth(elRef.clientWidth);\n  }\n\n  function handleDocSourceClick(docSource: DocSource) {\n    if (docSource.isIncludedInSearch) removeDocSourceFromSearch(docSource);\n    else includeDocSourceInSearch(docSource);\n  }\n\n  /* HOTKEYS */\n  // 'cmd+1' hotkey - change search filter to SO questions.\n  useHotkeys(electron.remote.process.platform === 'darwin' ? 'Cmd+1' : 'alt+1', () => {\n    if (state.modalItem) return;\n    setSearchFilter(ResultsFilter.StackOverflow);\n    trackShortcut({ action: 'Change filter to SO' });\n  }, { filter: () => true }, [state.modalItem, setSearchFilter]);\n\n  // 'cmd+2' hotkey - change search filter to GitHub Code search.\n  useHotkeys(electron.remote.process.platform === 'darwin' ? 'Cmd+2' : 'alt+2', () => {\n    if (state.modalItem) return;\n    setSearchFilter(ResultsFilter.GitHubCode);\n    trackShortcut({ action: 'Change filter to Code' });\n  }, { filter: () => true }, [state.modalItem, setSearchFilter]);\n\n  // 'cmd+3' hotkey - change search filter to Docs search.\n  useHotkeys(electron.remote.process.platform === 'darwin' ? 'Cmd+3' : 'alt+3', () => {\n    if (state.modalItem) return;\n    setSearchFilter(ResultsFilter.Docs);\n    trackShortcut({ action: 'Change filter to Docs' });\n  }, { filter: () => true }, [state.modalItem, setSearchFilter]);\n\n  // 'shift + up arrow' - navigate docs search results.\n  useHotkeys('shift+up', () => {\n    const idx = state.results[activeFilter].focusedIdx.idx;\n    if (idx > 0) {\n      focusResultItem(activeFilter, idx - 1, FocusState.WithScroll);\n    }\n  }, { filter: () => true }, [state.results, activeFilter, state.modalItem]);\n\n  // 'shift + down arrow' - navigate docs search results.\n  useHotkeys('shift+down', () => {\n    const idx = state.results[activeFilter].focusedIdx.idx;\n    if (idx < state.results[activeFilter].items.length - 1) {\n      focusResultItem(activeFilter, idx + 1, FocusState.WithScroll);\n    }\n  }, { filter: () => true }, [state.results, activeFilter, state.modalItem]);\n\n  // 'up arrow' hotkey - navigation.\n  useHotkeys('up', () => {\n    if (state.modalItem || state.isDocsFilterModalOpened) return;\n    // The docs search filter uses 'cmd + arrow' for the search navigation.\n    if (activeFilter === ResultsFilter.Docs) return;\n\n    const idx = state.results[activeFilter].focusedIdx.idx;\n    if (idx > 0) {\n      focusResultItem(activeFilter, idx - 1, FocusState.WithScroll);\n    }\n  }, { filter: () => true }, [state.results, activeFilter, state.modalItem]);\n\n  // 'down arrow' hotkey - navigation.\n  useHotkeys('down', () => {\n    if (state.modalItem || state.isDocsFilterModalOpened) return;\n    // The docs search filter uses 'cmd + arrow' for the search navigation.\n    if (activeFilter === ResultsFilter.Docs) return;\n\n    const idx = state.results[activeFilter].focusedIdx.idx;\n    if (idx < state.results[activeFilter].items.length - 1) {\n      focusResultItem(activeFilter, idx + 1, FocusState.WithScroll);\n    }\n  }, { filter: () => true }, [state.results, activeFilter, state.modalItem]);\n\n  // 'enter' hotkey - open the focused result in a modal.\n  useHotkeys('enter', () => {\n    if (activeFilter === ResultsFilter.Docs) return;\n    openModal(state.results[activeFilter].items[activeFocusedIdx.idx]);\n    trackShortcut({ action: 'Open modal' });\n  }, [state.results, activeFilter, activeFocusedIdx]);\n\n  // 'esc' hotkey - close modal or hide main window.\n  useHotkeys('esc', () => {\n    if (state.modalItem) {\n      closeModal();\n      trackShortcut({ action: 'Close modal' });\n      return;\n    }\n\n    if (state.isSearchingInDocPage) {\n      cancelSearchInDocPage();\n      trackShortcut({ action: 'Cancel search in doc page' });\n      return;\n    }\n\n    if (state.isDocsFilterModalOpened) {\n      closeDocsFilterModal();\n      trackShortcut({ action: 'Close docs filter modal' });\n      return;\n    }\n\n    hideMainWindow();\n    trackShortcut({ action: 'Hide main window' });\n  }, [state.modalItem, state.isSearchingInDocPage, state.isDocsFilterModalOpened]);\n\n  // 'cmd+o' hotkey - open the focused result in a browser.\n  useHotkeys(electron.remote.process.platform === 'darwin' ? 'Cmd+o' : 'alt+o', () => {\n    switch (activeFilter) {\n      case ResultsFilter.StackOverflow:\n        openFocusedSOItemInBrowser();\n        trackShortcut({ action: 'Open SO item in browser' });\n        break;\n      case ResultsFilter.GitHubCode:\n        openFocusedGitHubCodeItemInBrowser();\n        trackShortcut({ action: 'Open Code item in browser' });\n        break;\n    }\n  }, [activeFilter, openFocusedGitHubCodeItemInBrowser, openFocusedGitHubCodeItemInBrowser]);\n\n  // 'cmd+i' hotkey - open the GitHubCode result in a vscode.\n  useHotkeys(electron.remote.process.platform === 'darwin' ? 'Cmd+i' : 'alt+i', () => {\n    if (activeFilter === ResultsFilter.GitHubCode) {\n      openFocusedGitHubCodeItemInVSCode();\n      trackShortcut({ action: 'Open code in VSCode' });\n    }\n  }, [activeFilter, openFocusedGitHubCodeItemInVSCode]);\n\n  // 'cmd+f' hotkey - search in a doc page.\n  useHotkeys(electron.remote.process.platform === 'darwin' ? 'Cmd+f' : 'alt+f', () => {\n    if (activeFilter !== ResultsFilter.Docs) return;\n    searchInDocPage();\n    docPageSearchInputRef?.current?.focus();\n    trackShortcut({ action: 'Search in doc page' });\n  }, [activeFilter, searchInDocPage]);\n\n  useHotkeys(electron.remote.process.platform === 'darwin' ? 'Cmd+shift+f' : 'alt+shift+f', () => {\n    if (activeFilter !== ResultsFilter.Docs) return;\n\n    if (state.isDocsFilterModalOpened) closeDocsFilterModal();\n    else openDocsFilterModal();\n    trackShortcut({ action: 'Filter docs' });\n  }, [activeFilter, state.isDocsFilterModalOpened]);\n  /* //////////////////// */\n\n  useIPCRenderer('github-access-token', async (_, { accessToken }: { accessToken: string | null }) => {\n    if (accessToken === null) {\n      disconnectGitHub();\n      disconnectGitHubAccount(); // The state reducer's action.\n      return;\n    }\n    tryToLoadGitHubAccount();\n    if (debouncedQuery) searchGHCode(debouncedQuery);\n  }, [debouncedQuery]);\n\n  // Run only on the initial render.\n  // Get the cached search query and search filter.\n  // Try to load GitHub account if user linked their\n  // GitHub in the past.\n  useEffect(() => {\n    async function loadCachedData() {\n      const width = await getDocSearchResultsDefaultWidth();\n      setDocSearchResultsDefaultWidth(width);\n\n      const filter = await getSavedSearchFilter();\n      setSearchFilter(filter);\n\n      const lastQuery = await getSavedSearchQuery();\n      setSearchQuery(lastQuery);\n\n      try {\n        // We merge the cached doc sources and the fetched ones\n        // so we always have the most up to date doc sources\n        // and at the same time we respect user's selection.\n        const cachedDocSources = await getCachedDocSources();\n        const allDocSources = await fetchDocSources();\n        const mergedDocSources = allDocSources.map(ds => {\n          const cached = cachedDocSources.find(cds => cds.slug === ds.slug);\n          if (cached) return {...ds, isIncludedInSearch: cached.isIncludedInSearch};\n          return ds;\n        });\n        fetchDocSourcesSuccess(mergedDocSources);\n      } catch(err) {\n        fetchDocSourcesFail(err);\n      }\n\n      setIsLoadingCachedData(false);\n    }\n    loadCachedData();\n    tryToLoadGitHubAccount();\n  // We want to run this only during the first render.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Log error messages.\n  useEffect(() => {\n    if (!state.errorMessage) return;\n    console.error(state.errorMessage);\n  }, [state.errorMessage]);\n\n  // Search when the debounced query changes.\n  useEffect(() => {\n    if (!debouncedQuery || debouncedQuery === debouncedLastSearchedQuery) return;\n\n    searchAll(\n      debouncedQuery,\n      activeFilter,\n      state.gitHubAccount.isConnected,\n      state.docSources,\n    );\n    trackSearch({\n      activeFilter: activeFilter.toString(),\n    });\n  }, [\n    debouncedQuery,\n    debouncedLastSearchedQuery,\n    activeFilter,\n    state.gitHubAccount.isConnected,\n    state.docSources,\n  ]);\n\n  // Cache the debounced query.\n  useEffect(() => {\n    if (debouncedQuery !== debouncedLastSearchedQuery) {\n      saveSearchQuery(debouncedQuery);\n    }\n  }, [debouncedQuery, debouncedLastSearchedQuery]);\n\n  // Cache the currently active filter.\n  useEffect(() => {\n    if (state.isLoadingCachedData) return;\n    saveSearchFilter(activeFilter);\n  }, [activeFilter, state.isLoadingCachedData]);\n\n  // Cache the doc sources.\n  useEffect(() => {\n    if (state.docSources.length === 0) return;\n    saveDocSources(state.docSources);\n\n    if (debouncedQuery) {\n      searchDocs(debouncedQuery, state.docSources);\n    }\n  // NOTE: We don't want to run this useEffect every time\n  // the search query changes. We just want to refresh\n  // the docs results when user changes what doc sources\n  // they want to have active.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [state.docSources]);\n\n  return (\n    <>\n      {state.modalItem && activeFilter === ResultsFilter.StackOverflow &&\n          <StackOverflowModal\n          soResult={state.modalItem as StackOverflowResult}\n          onCloseRequest={closeModal}\n        />\n      }\n\n      {state.modalItem && activeFilter === ResultsFilter.GitHubCode &&\n        <CodeModal\n          codeResult={state.modalItem as CodeResult}\n          onCloseRequest={closeModal}\n        />\n      }\n\n      {state.isDocsFilterModalOpened && activeFilter === ResultsFilter.Docs &&\n        <DocsFilterModal\n          docSources={state.docSources}\n          onDocSourceClick={handleDocSourceClick}\n          onCloseRequest={closeDocsFilterModal}\n        />\n      }\n\n      <Container>\n        <SearchInput\n          placeholder=\"Search StackOverflow, code on GitHub, and docs\"\n          value={state.search.query}\n          onChange={handleSearchInputChange}\n          activeFilter={activeFilter}\n          onFilterSelect={f => setSearchFilter(f)}\n          isLoading={isActiveFilterLoading}\n          isModalOpened={!!state.modalItem}\n        />\n\n        {!state.search.query\n         // We don't want to show this if users selected GitHubCode filter\n         // and haven't connected their GitHub account yet.\n         && (state.gitHubAccount.isConnected || activeFilter !== ResultsFilter.GitHubCode)\n         && !isActiveFilterLoading\n         &&\n          <InfoMessage>Type your search query</InfoMessage>\n        }\n\n        {state.search.query\n         // We don't want to show this if users selected GitHubCode filter\n         // and haven't connected their GitHub account yet.\n         && (state.gitHubAccount.isConnected || activeFilter !== ResultsFilter.GitHubCode)\n         && hasActiveFilterEmptyResults\n         && !isActiveFilterLoading\n         // Don't show \"Nothing found\" when user is searching docs but disabled\n         // all doc sources.\n         && !(activeFilter === ResultsFilter.Docs && !isAnyDocSourceIncluded)\n         &&\n          <InfoMessage>Nothing found</InfoMessage>\n        }\n\n        {state.search.query\n         && activeFilter === ResultsFilter.Docs\n         && !isAnyDocSourceIncluded\n         && !isActiveFilterLoading\n         &&\n          <>\n            <InfoMessage>No documentation is enabled</InfoMessage>\n            <EnableDocSourcesButton\n              onClick={openDocsFilterModal}\n            >\n              Enable documentations\n            </EnableDocSourcesButton>\n          </>\n        }\n\n        {activeFilter === ResultsFilter.GitHubCode\n         && !state.gitHubAccount.isConnected\n         &&\n          <GitHubConnect>\n            <GitHubConnectTitle>\n              Connect your GitHub account to search on GitHub\n            </GitHubConnectTitle>\n            <ConnectGitHubButton onClick={connectGitHub()}>\n              Connect my GitHub account\n            </ConnectGitHubButton>\n            {/* <GitHubPrivacyLink onClick={openPrivacyTerms}>\n              Read more about privacy and what access Devbook needs\n            </GitHubPrivacyLink> */}\n          </GitHubConnect>\n        }\n\n        {state.search.query\n         && !hasActiveFilterEmptyResults\n         && !isActiveFilterLoading\n         &&\n          <>\n            {(activeFilter === ResultsFilter.StackOverflow || activeFilter === ResultsFilter.GitHubCode) &&\n              <SearchResultsWrapper>\n                {activeFilter === ResultsFilter.StackOverflow\n                 && (state.results[ResultsFilter.StackOverflow].items as StackOverflowResult[]).map((sor, idx) => (\n                  <StackOverflowItem\n                    key={idx}\n                    soResult={sor}\n                    focusState={activeFocusedIdx.idx === idx ? activeFocusedIdx.focusState : FocusState.None}\n                    onHeaderClick={() => focusResultItem(ResultsFilter.StackOverflow, idx, FocusState.NoScroll)}\n                    onTitleClick={() => openModal(sor)}\n                  />\n                ))}\n\n                {activeFilter === ResultsFilter.GitHubCode\n                 && state.gitHubAccount.isConnected\n                 && (state.results[ResultsFilter.GitHubCode].items as CodeResult[]).map((cr, idx) => (\n                  <CodeItem\n                    key={idx}\n                    codeResult={cr}\n                    focusState={activeFocusedIdx.idx === idx ? activeFocusedIdx.focusState : FocusState.None}\n                    onHeaderClick={() => focusResultItem(ResultsFilter.GitHubCode, idx, FocusState.NoScroll)}\n                    onFilePathClick={() => openModal(cr)}\n                  />\n                ))}\n              </SearchResultsWrapper>\n            }\n            {activeFilter === ResultsFilter.Docs\n             && isAnyDocSourceIncluded\n             &&\n              <DocsWrapper>\n                <Resizable\n                  defaultSize={{\n                    width: state.layout.docSearchResultsDefaultWidth,\n                    height: \"100%\"\n                  }}\n                  maxWidth=\"50%\"\n                  minWidth=\"200\"\n                  enable={{right: true}}\n                  onResizeStop={(e, dir, ref) => handleDocSearchResultsResizeStop(e, dir, ref)}\n                >\n                  <DocSearchResults>\n                  {(state.results[ResultsFilter.Docs].items as DocResult[]).map((d, idx) => (\n                    <DocSearchResultItem\n                      key={idx}\n                      docResult={d}\n                      focusState={activeFocusedIdx.idx === idx ? activeFocusedIdx.focusState : FocusState.None}\n                      onClick={() => focusResultItem(ResultsFilter.Docs, idx, FocusState.NoScroll)}\n                    />\n                  ))}\n                  </DocSearchResults>\n                </Resizable>\n                <DocPage\n                  isDocsFilterModalOpened={state.isDocsFilterModalOpened}\n                  isSearchingInDocPage={state.isSearchingInDocPage}\n                  pageURL={(activeFocusedItem as DocResult).page.pageURL}\n                  html={(activeFocusedItem as DocResult).page.html}\n                  searchInputRef={docPageSearchInputRef}\n                />\n              </DocsWrapper>\n            }\n\n            {/* StackOverflow search results + StackOverflow modal hotkeys */}\n            {!state.modalItem && activeFilter === ResultsFilter.StackOverflow &&\n              <StackOverflowSearchHotkeysPanel\n                onOpenClick={() => openModal(activeFocusedItem)}\n                onOpenInBrowserClick={openFocusedSOItemInBrowser}\n              />\n            }\n            {state.modalItem && activeFilter === ResultsFilter.StackOverflow &&\n              <StackOverflowModalHotkeysPanel\n                onOpenInBrowserClick={openFocusedSOItemInBrowser}\n                onCloseClick={closeModal}\n              />\n            }\n            {/*-------------------------------------------------------------*/}\n\n\n            {/* GitHub search results + GitHub modal hotkeys */}\n            {!state.modalItem && activeFilter === ResultsFilter.GitHubCode &&\n              <GitHubCodeSearchHotkeysPanel\n                onOpenClick={() => openModal(activeFocusedItem)}\n                onOpenInVSCodeClick={openFocusedGitHubCodeItemInVSCode}\n                onOpenInBrowserClick={openFocusedGitHubCodeItemInBrowser}\n              />\n            }\n            {state.modalItem && activeFilter === ResultsFilter.GitHubCode &&\n              <GitHubCodeModalHotkeysPanel\n                onOpenInVSCodeClick={openFocusedGitHubCodeItemInVSCode}\n                onOpenInBrowserClick={openFocusedGitHubCodeItemInBrowser}\n                onCloseClick={closeModal}\n              />\n            }\n            {/*-------------------------------------------------------------*/}\n\n            {/* Docs search results */}\n            {!state.modalItem\n             && activeFilter === ResultsFilter.Docs\n             && isAnyDocSourceIncluded\n             &&\n              <DocsSearchHotkeysPanel\n                isDocsFilterModalOpened={state.isDocsFilterModalOpened}\n                isSearchingInDocPage={state.isSearchingInDocPage}\n                onOpenFilterDocsClick={openDocsFilterModal}\n                onCloseFilterDocsClick={closeDocsFilterModal}\n                onSearchInDocPageClick={searchInDocPage}\n                onCancelSearchInDocPageClick={cancelSearchInDocPage}\n              />\n            }\n            {/*-------------------------------------------------------------*/}\n          </>\n        }\n      </Container>\n    </>\n  );\n}\n\nexport default Home;\n\n","/Users/vasekmlejnsky/Developer/devbook/src/Preferences/index.tsx",[],"/Users/vasekmlejnsky/Developer/devbook/src/Onboarding/index.tsx",[],"/Users/vasekmlejnsky/Developer/devbook/src/Home/HotkeysPanel/Hotkey.tsx",[],"/Users/vasekmlejnsky/Developer/devbook/src/Home/SearchItemFocusState.ts",[],"/Users/vasekmlejnsky/Developer/devbook/src/hooks/useIPCRenderer.ts",[],"/Users/vasekmlejnsky/Developer/devbook/src/Home/StackOverflow/StackOverflowModal.tsx",[],"/Users/vasekmlejnsky/Developer/devbook/src/Home/StackOverflow/StackOverflowItem.tsx",[],"/Users/vasekmlejnsky/Developer/devbook/src/Home/GitHub/CodeModal.tsx",[],"/Users/vasekmlejnsky/Developer/devbook/src/Home/GitHub/CodeItem.tsx",[],"/Users/vasekmlejnsky/Developer/devbook/src/components/Loader.tsx",[],"/Users/vasekmlejnsky/Developer/devbook/src/Preferences/Pages/GeneralPreferences.tsx",[],"/Users/vasekmlejnsky/Developer/devbook/src/Preferences/Pages/Integrations.tsx",[],"/Users/vasekmlejnsky/Developer/devbook/src/Onboarding/pages/Introduction.tsx",[],"/Users/vasekmlejnsky/Developer/devbook/src/Onboarding/pages/Shortcut.tsx",[],"/Users/vasekmlejnsky/Developer/devbook/src/Home/HotkeysPanel/index.ts",[],"/Users/vasekmlejnsky/Developer/devbook/src/hooks/useDebounce.ts",[],"/Users/vasekmlejnsky/Developer/devbook/src/Home/Docs/index.ts",[],"/Users/vasekmlejnsky/Developer/devbook/src/search/stackOverflow.ts",[],"/Users/vasekmlejnsky/Developer/devbook/src/search/gitHub.ts",[],"/Users/vasekmlejnsky/Developer/devbook/src/search/docs.ts",[],"/Users/vasekmlejnsky/Developer/devbook/src/components/Button.tsx",[],"/Users/vasekmlejnsky/Developer/devbook/src/Home/StackOverflow/StackOverflowBody.tsx",[],"/Users/vasekmlejnsky/Developer/devbook/src/Home/GitHub/Code.tsx",[],"/Users/vasekmlejnsky/Developer/devbook/src/Preferences/Pages/Base.tsx",[],"/Users/vasekmlejnsky/Developer/devbook/src/Home/HotkeysPanel/GitHubCode/ModalHotkeysPanel.tsx",[],"/Users/vasekmlejnsky/Developer/devbook/src/Home/HotkeysPanel/StackOverflow/SearchHotkeysPanel.tsx",[],"/Users/vasekmlejnsky/Developer/devbook/src/Home/HotkeysPanel/Docs/SearchHotkeysPanel.tsx",[],"/Users/vasekmlejnsky/Developer/devbook/src/Home/HotkeysPanel/StackOverflow/ModalHotkeysPanel.tsx",[],"/Users/vasekmlejnsky/Developer/devbook/src/Home/Docs/DocPage.tsx",["179","180"],"import React, {\n  useRef,\n  useState,\n  useEffect,\n} from 'react';\nimport styled from 'styled-components';\nimport Prism from 'prismjs';\n\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport { openLink } from 'mainProcess';\nimport useDebounce from 'hooks/useDebounce';\nimport { ReactComponent as chevronImg } from 'img/chevron.svg';\n\n\n\nconst DocPageContainer = styled.div`\n  flex: 1;\n  padding: 10px 15px 20px;\n  height: 100%;\n  width: 100%;\n  min-width: 1px;\n  // background: #1b1b1b;\n  background: #1f1e1e;\n\n  //color: #E3E3E3;\n  color: #c1c9d2;\n  //color: #ced3d8;\n  font-size: 14px;\n  line-height: 1.65em;\n  font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Ubuntu,sans-serif;\n\n  overflow: hidden;\n  overflow-y: overlay;\n\n  h1 {\n    margin: 0;\n    padding: 15px 0;\n    color: #dcdcdc;\n    font-weight: 600;\n    font-size: 24px;\n    border-bottom: 1px solid #3B3A4A;\n  }\n\n  h2 {\n    margin: 0;\n    padding: 15px 0;\n    color: #dcdcdc;\n    font-weight: 600;\n    font-size: 20px;\n  }\n\n  h3 {\n    margin: 0;\n    padding: 15px 0;\n    color: #dcdcdc;\n    font-weight: 500;\n    font-size: 18px;\n  }\n\n  ul {\n    padding-left: 40px;\n    li {\n      :not(:last-child) {\n        margin-bottom: 10px;\n      }\n    }\n  }\n\n  code {\n    padding: 2px 4px;\n\n    color: #D9D9DA;\n    font-family: 'Roboto Mono';\n    font-size: 13px;\n    font-weight: 400;\n\n    background: #2a2933;\n    border-radius: 3px;\n  }\n\n  blockquote {\n    margin: 0 5px 0 10px;\n    position: relative;\n    padding: 0 15px;\n    color: rgba(255, 255, 255, 0.8);\n\n    :before {\n      content: \"\";\n      display: block;\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      width: 4px;\n      border-radius: 8px;\n      background: #555a5e;\n    }\n  }\n\n  /* Code block */\n  pre {\n    padding: 10px;\n    overflow-y: auto;\n\n    font-size: 13px;\n    font-family: 'Roboto Mono';\n    background: #373648;\n    border-left: 4px solid #5861d6;\n    border-radius: 3px;\n\n    code {\n      padding: 0;\n      background: transparent;\n      line-height: 1.4em;\n    }\n  }\n\n  a {\n    color: #4CACD6;\n    text-decoration: underline;\n  }\n\n  img {\n    max-width: 100%;\n    :hover {\n      cursor: pointer;\n    }\n  }\n\n  iframe {\n    padding: 3px;\n    border-radius: 5px;\n    background: #fff;\n  }\n\n  .devbook-highlight {\n    color: #000;\n    background: #FFFF3F;\n\n    font-size: inherit;\n    font-weight: inherit;\n    transition: none;\n  }\n\n  .devbook-highlight.selected {\n    background: #e46804;\n  }\n\n  /* MDN Specific (JS) */\n  .badge {\n    font-family: 'Roboto Mono';\n    font-weight: 600;\n    text-transform: lowercase;\n    font-size: 13px;\n    color: #87929c;\n  }\n\n  // <h3> title for parameters and return value.\n  #parameters, #return_value {\n    border-bottom: 1px solid #3B3A4A;\n  }\n\n  dl {\n    margin: 10px 0 0;\n    dt {\n      code {\n        font-weight: 500;\n        background: transparent;\n      }\n    }\n\n    dd {\n      margin: 5px 0 0 15px;\n\n      // Nested <dl> should have spacing.\n      dl {\n        margin-top: 10px;\n      }\n    }\n  }\n\n  .notecard.note {\n    padding: 1px 15px;\n    background: #1C2443;\n    border-left: 4px solid #1F4AE5;\n    border-radius: 3px;\n  }\n`;\n\nconst SearchInputWrapper = styled.div`\n  position: absolute;\n  top: 115px;\n  right: 20px;\n  min-height: 50px;\n\n  padding: 5px 10px;\n  display: flex;\n  align-items: center;\n  background: #111013;\n  border: 1px solid #434252;\n  border-radius: 5px;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.8);\n`;\n\nconst SearchInput = styled.input`\n  width: 200px;\n  color: white;\n  font-family: 'Poppins';\n  font-size: 14px;\n\n  background: transparent;\n  border: none;\n  outline: none;\n\n  ::placeholder {\n    color: #5A5A6F;\n  }\n`;\n\nconst SearchDelimiter = styled.div`\n  width: 1px;\n  height: 25px;\n  margin: 0 10px;\n  background: #434252;\n`;\n\nconst SearchControls = styled.div`\n  padding: 0 5px;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst HitCount = styled.span`\n  min-width: 70px;\n  text-align: right;\n  font-size: 14px;\n  color: #5A5A6F;\n`;\n\nconst ChevronButton = styled.button`\n  padding: 5px 0;\n\n  border: none;\n  background: none;\n  outline: none;\n\n  :hover {\n    cursor: pointer;\n    path {\n      stroke: #fff;\n    }\n  }\n\n  :first-child {\n    margin-right: 10px;\n  }\n`;\n\nconst ChevronUp = styled(chevronImg)`\n  transform: rotate(180deg);\n`;\n\nconst ChevronDown = styled(chevronImg)`\n`;\n\nfunction getTextNodeChildren(node: Node) {\n  let nodes: Node[] = [];\n  for (let n = node.firstChild; n; n = n.nextSibling) {\n    if (n.nodeType === Node.TEXT_NODE) nodes.push(n);\n    nodes = nodes.concat(getTextNodeChildren(n));\n  }\n  return nodes;\n}\n\nfunction removeHighlight(node: Node) {\n  if (!node.parentNode) throw new Error('Cannot remove highlight on a node without parent');\n  if (node.childNodes.length === 0) throw new Error('Cannot remove highlight on a node without children');\n  const textNode = node.childNodes[0];\n  if (textNode.nodeType !== Node.TEXT_NODE || !textNode.nodeValue)\n    throw new Error('Cannot remove highlight on a node that does not have a text node.');\n\n  node.parentNode.insertBefore(document.createTextNode(textNode.nodeValue), node.nextSibling);\n  node.parentNode.removeChild(node);\n}\n\nfunction highlightNode(textNode: Node, startIdx: number, endIdx: number) {\n  if (textNode.nodeType !== Node.TEXT_NODE) throw new Error('Cannot highlight a node that is not of type TEXT_NODE');\n  if (!textNode.nodeValue) return;\n\n  const nodes: Node[] = [];\n  const infront = textNode.nodeValue.slice(0, startIdx);\n  if (infront) {\n    nodes.push(document.createTextNode(infront));\n  }\n\n  const highlight = textNode.nodeValue.slice(startIdx, endIdx+1);\n  const highlightEl = document.createElement('mark');\n  highlightEl.classList.add('devbook-highlight');\n  highlightEl.innerText = highlight;\n  nodes.push(highlightEl as Node);\n\n  const after = textNode.nodeValue.slice(endIdx+1);\n  if (after) {\n    nodes.push(document.createTextNode(after));\n  }\n\n  if (textNode.parentNode) {\n    nodes.forEach(newN => {\n      textNode.parentNode!.insertBefore(newN, textNode);\n    });\n    if (nodes.length > 0) {\n      textNode.parentNode.removeChild(textNode);\n    }\n    return highlightEl as Node;\n  }\n}\n\nfunction highlightPattern(textNodes: Node[], startIdx: number, pattern: string) {\n  let matchedLength = 0; // Length of a pattern substring that is already matched.\n  let wholeText = '';\n  const nodes: Node[] = [];\n  for (let i = 0; i < textNodes.length; i++) {\n    const n = textNodes[i];\n    if (!n.nodeValue) continue;\n    wholeText += n.nodeValue;\n\n    // This node contains the starting index of the matched pattern.\n    if (wholeText.length > startIdx && matchedLength < pattern.length) {\n      // Convert startIdx to an index relative to the current node.\n      // We must take the already matched pattern substring into an\n      // account.\n      const nodeStartIdx = (startIdx + matchedLength) - (wholeText.length - n.nodeValue.length);\n\n      let nodeEndIdx = 0;\n      if (pattern.length - matchedLength > n.nodeValue.length) {\n        // The pattern is longer than this node. We want to highlight the whole node.\n        nodeEndIdx = n.nodeValue.length - 1;\n      } else {\n        // The pattern is shorter and the same length is the current node\n        // and starts anywhere in the middle of the node.\n        nodeEndIdx = nodeStartIdx + (pattern.length - matchedLength - 1);\n      }\n      matchedLength += nodeEndIdx - nodeStartIdx + 1;\n      const highlightedNode = highlightNode(n, nodeStartIdx, nodeEndIdx);\n      if (highlightedNode) {\n        nodes.push(highlightedNode);\n      }\n    }\n  }\n  return nodes;\n}\n\nfunction selectHighlight(highlight: Highlight) {\n  highlight.nodes.forEach(n => {\n    (n as HTMLElement).classList.add('selected');\n  });\n  (highlight.nodes[0] as HTMLElement).scrollIntoView({ block: 'center' });\n}\n\nfunction deselectHighlight(highlight: Highlight) {\n  highlight.nodes.forEach(n => {\n    (n as HTMLElement).classList.remove('selected');\n  });\n}\n\ninterface Highlight {\n  index: number;\n  nodes: Node[];\n}\n\ninterface DocPageProps {\n  isDocsFilterModalOpened: boolean;\n  isSearchingInDocPage: boolean;\n  pageURL: string;\n  html: string;\n  searchInputRef: any;\n}\n\nfunction DocPage({\n  isDocsFilterModalOpened,\n  isSearchingInDocPage,\n  pageURL,\n  html,\n  searchInputRef,\n}: DocPageProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [searchQuery, setSearchQuery] = useState('');\n  const debouncedSearchQuery = useDebounce(searchQuery, 0);\n\n  const [highlights, setHighlights] = useState<Highlight[]>([]);\n  const [selectedIdx, setSelectedIdx] = useState(0);\n\n  function highlightCode(html: string) {\n    const el = document.createElement('html');\n    el.innerHTML = html;\n\n    const codes = el.getElementsByTagName('code');\n    for (const code of codes) {\n      const codeText = (code as HTMLElement).innerText;\n      if (codeText) {\n        // TODO: We could use the correct langague highlight based on the documentation.\n        const codeHTML = Prism.highlight(codeText, Prism.languages.clike, 'clike');\n        code.innerHTML = codeHTML;\n      }\n    }\n\n    const pres = el.getElementsByTagName('pre');\n    for (const pre of pres) {\n      const codeText = (pre as HTMLElement).innerText;\n      if (codeText) {\n        // TODO: We could use the correct langague highlight based on the documentation.\n        const codeHTML = Prism.highlight(codeText, Prism.languages.clike, 'clike');\n        pre.innerHTML = codeHTML;\n      }\n    }\n\n    // TODO: Load TEX language.\n    const maths = el.getElementsByTagName('math');\n    for (const math of maths) {\n      //console.log('math', math);\n      const mathText = (math as HTMLElement).innerText;\n      //console.log('mathText', mathText);\n      //console.log('Prism', Prism.languages)\n      if (mathText) {\n        // TODO: We could use the correct langague highlight based on the documentation.\n        const mathHTML = Prism.highlight(mathText, Prism.languages.tex, 'tex');\n        math.innerHTML = mathHTML;\n      }\n    }\n\n    return el.outerHTML || '<html></html>';\n  }\n\n  function selectNextHighlight() {\n    deselectHighlight(highlights[selectedIdx]);\n    if (selectedIdx < highlights.length - 1) {\n      selectHighlight(highlights[selectedIdx+1]);\n      setSelectedIdx(c => c += 1);\n    } else {\n      selectHighlight(highlights[0]);\n      setSelectedIdx(0);\n    }\n  }\n\n  function selectPreviousHighlight() {\n      deselectHighlight(highlights[selectedIdx]);\n    if (selectedIdx > 0) {\n      selectHighlight(highlights[selectedIdx-1]);\n      setSelectedIdx(c => c -= 1);\n    } else {\n      selectHighlight(highlights[highlights.length-1]);\n      setSelectedIdx(highlights.length - 1);\n    }\n  }\n\n  function handleSearchInputKeyDown(e: any) {\n    // Enter pressed.\n    if (searchQuery && e.keyCode === 13) {\n      if (e.shiftKey) {\n        selectPreviousHighlight();\n      } else {\n        selectNextHighlight();\n      }\n    }\n  }\n\n  // Open all links in the browser.\n  function handleDocPageClick(e: any) {\n    const target = e.target || e.srcElement;\n    console.log('TARGET', target);\n    // The 'target.parentNode' handles a case when <a> element contains a <code> element.\n    // If <code> element is inside the <a> element the event's target is actually the\n    // <code> element and not the <a> element. So we have to check if its parent is <a>.\n    if (target.tagName === 'A' || target.parentNode.tagName === 'A') {\n      let url = target.getAttribute('href') || target.parentNode.getAttribute('href');\n      if (\n        url.startsWith('.')\n        || url.startsWith('#')\n        || !url.startsWith('http://')\n        || !url.startsWith('https://')\n       ) {\n        url = new URL(url, pageURL).href;\n      }\n      openLink(url);\n      e.preventDefault();\n    }\n\n    if (target.tagName === 'IMG') {\n      let url = target.getAttribute('src');\n      if (\n        url.startsWith('.')\n        || url.startsWith('#')\n        || !url.startsWith('http://')\n        || !url.startsWith('https://')\n       ) {\n        url = new URL(url, pageURL).href;\n      }\n      openLink(url);\n      e.preventDefault();\n    }\n  }\n\n  useHotkeys('up', () => {\n    if (isSearchingInDocPage || isDocsFilterModalOpened) return;\n\n    if (containerRef?.current) {\n      containerRef.current.scrollBy(0, -15);\n    }\n  }, { filter: () => true }, [isSearchingInDocPage, isDocsFilterModalOpened]);\n\n  useHotkeys('down', () => {\n    if (isSearchingInDocPage || isDocsFilterModalOpened) return;\n\n    if (containerRef?.current) {\n      containerRef.current.scrollBy(0, 15);\n    }\n  }, { filter: () => true }, [isSearchingInDocPage, isDocsFilterModalOpened]);\n\n  useEffect(() => {\n    highlights.forEach(h => {\n      h.nodes.forEach(removeHighlight);\n    });\n    setHighlights([]);\n    setSelectedIdx(0);\n\n    if (!debouncedSearchQuery || !containerRef?.current) return;\n\n    const textNodes = getTextNodeChildren(containerRef.current as Node);\n    let wholeText = '';\n    textNodes.map(n => {\n      wholeText += n.nodeValue || '';\n    });\n\n    const escaped = debouncedSearchQuery\n      .toLowerCase()\n      .replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string.\n    const re = new RegExp(escaped, 'g');\n    let match: RegExpExecArray | null;\n    let highlightIndex = 0;\n    while ((match = re.exec(wholeText.toLowerCase())) !== null) {\n      // TODO: highlightPattern sometimes returns an empty array\n      const nodes = highlightPattern([...textNodes], match.index, debouncedSearchQuery);\n      if (nodes.length > 0) {\n        const highlight: Highlight = { index: highlightIndex++, nodes };\n        setHighlights(c => c.concat(highlight));\n\n        // Select the first highlight\n        if (highlight.index === 0) selectHighlight(highlight);\n      }\n    }\n  }, [setHighlights, debouncedSearchQuery]);\n\n  return (\n    <>\n      {isSearchingInDocPage &&\n        <SearchInputWrapper>\n          <SearchInput\n            ref={searchInputRef}\n            autoFocus\n            placeholder=\"Search in page\"\n            value={searchQuery}\n            onChange={e => setSearchQuery(e.target.value)}\n            onKeyDown={handleSearchInputKeyDown}\n          />\n          <HitCount>\n            <>\n            {searchQuery &&\n              <>\n                {highlights.length > 0 &&\n                  <span>{selectedIdx+1}/{highlights.length}</span>\n                }\n                {highlights.length === 0 &&\n                  <span>0/0</span>\n                }\n              </>\n            }\n            </>\n          </HitCount>\n          <SearchDelimiter/>\n          <SearchControls>\n            <ChevronButton\n              onClick={selectNextHighlight}\n            >\n              <ChevronDown/>\n            </ChevronButton>\n\n            <ChevronButton\n              onClick={selectPreviousHighlight}\n            >\n              <ChevronUp/>\n            </ChevronButton>\n          </SearchControls>\n        </SearchInputWrapper>\n      }\n      <DocPageContainer\n        id=\"doc-page\"\n        onClick={handleDocPageClick}\n        ref={containerRef}\n        dangerouslySetInnerHTML={{__html: highlightCode(html) as string}}\n      />\n    </>\n  );\n}\n\nexport default DocPage;\n\n","/Users/vasekmlejnsky/Developer/devbook/src/Home/Docs/SearchResultItem.tsx",[],"/Users/vasekmlejnsky/Developer/devbook/src/Home/Docs/DocsFilterModal.tsx",["181","182","183","184"],"import React, {\n  useState,\n  useEffect,\n  useCallback,\n} from 'react';\nimport styled from 'styled-components';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport { DocSource } from 'search/docs';\nimport Modal from 'components/Modal';\nimport { ReactComponent as searchImg } from 'img/search.svg';\n\nconst StyledModal = styled(Modal)`\n  height: 100%;\n  margin: 60px 0 69px;\n  min-width: 550px;\n\n  display: flex;\n  flex-direction: column;\n\n  overflow: hidden;\n  background: #1C1B26;\n  border-radius: 5px;\n  border: 1px solid #3B3A4A;\n`;\n\nconst SearchWrapper = styled.div`\n  padding: 10px;\n  width: 100%;\n  background: #25252E;\n\n  display: flex;\n  align-items: center;\n  border-bottom: 1px solid #3B3A4A;\n`;\n\nconst SearchImg = styled(searchImg)`\n  margin-right: 8px;\n  height: auto;\n  width: 18px;\n\n  path {\n    stroke: #5A5A6F;\n  }\n`;\n\nconst SearchInput = styled.input`\n  width: 100%;\n\n  color: #fff;\n  font-size: 15px;\n  font-weight: 400;\n  font-family: 'Poppins';\n\n  background: #25252E;\n  border: none;\n  outline: none;\n\n  ::placeholder {\n    color: #5A5A6F;\n  }\n`;\n\nconst Content = styled.div`\n  padding: 10px 0 50px;\n\n  height: 100%;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst DocsListHeader = styled.div`\n  width: 100%;\n  padding: 0 10px;\n  margin-bottom: 10px;\n\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst HeaderText = styled.span`\n  color: #5A5A6F;\n  font-size: 14px;\n  font-weight: 500;\n`;\n\nconst DocsListsWrapper = styled.div`\n  height: 100%;\n  width: 100%;\n\n  display: flex;\n  flex-direction: column;\n\n  overflow: overlay;\n`;\n\nconst DocsListIncluded = styled.div`\n  width: 100%;\n  margin-bottom: 20px;\n\n  display: flex;\n  flex-direction: column;\n`;\n\nconst DocsListNotIncluded = styled.div`\n  width: 100%;\n\n  display: flex;\n  flex-direction: column;\n`;\n\nconst DocRow = styled.div<{ isFocused?: boolean, lastUsedNavigation: Navigation }>`\n  width: 100%;\n  padding: 5px 10px;\n\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  border-bottom: 1px solid #262736;\n  background: ${props => props.isFocused && props.lastUsedNavigation === Navigation.Keys ? '#2C2F5A' : 'transparent'};\n\n  :hover {\n    ${props => props.lastUsedNavigation === Navigation.Mouse ? 'background: #2C2F5A' : ''};\n    cursor: pointer;\n  }\n`;\n\nconst DocName = styled.span`\n  color: #fff;\n  font-size: 14px;\n  font-weight: 500;\n`;\n\nconst DocToggle = styled.input`\n`;\n\n\ninterface DocsFilterModalProps {\n  docSources: DocSource[];\n  onDocSourceClick: (ds: DocSource) => void;\n  onCloseRequest?: () => void;\n}\n\nenum Navigation {\n  Mouse,\n  Keys,\n}\n\nfunction DocsFilterModal({\n  docSources,\n  onDocSourceClick,\n  onCloseRequest,\n}: DocsFilterModalProps) {\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const [selectedIdx, setSelectedIdx] = useState(0);\n\n  const [includedSources, setIncludedSources] = useState<DocSource[]>([]);\n  const [notIncludedSources, setNotIncludedSources] = useState<DocSource[]>([]);\n\n  const [lastUsedNavigation, setLastUseNavigation] = useState<Navigation>(Navigation.Keys);\n\n  const includedVisibleSources = useCallback(() => {\n    return includedSources.filter(ds => ds.name.toLowerCase().match(new RegExp(escapeRegex(searchQuery))));\n  }, [includedSources, searchQuery]);\n  const notIncludedVisibleSources = useCallback(() => {\n    return notIncludedSources.filter(ds => ds.name.toLowerCase().match(new RegExp(escapeRegex(searchQuery))));\n  }, [notIncludedSources, searchQuery]);\n\n  function escapeRegex(s: string) {\n    return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n  }\n\n  function toggleDocSource(docSource: DocSource, includedSlice: boolean) {\n    if (includedSlice) {\n      setIncludedSources(c =>\n        c.map(ds => ds.slug === docSource.slug ? {...ds, isIncludedInSearch: !ds.isIncludedInSearch} : ds)\n      );\n    } else {\n      setNotIncludedSources(c =>\n        c.map(ds => ds.slug === docSource.slug ? {...ds, isIncludedInSearch: !ds.isIncludedInSearch} : ds)\n      );\n    }\n    onDocSourceClick(docSource);\n  }\n\n  function handleDocRowMouseOver(idx: number, isInIncludedSlice: boolean) {\n    if (isInIncludedSlice) {\n      setSelectedIdx(idx);\n    } else {\n      setSelectedIdx(idx + includedVisibleSources().length);\n    }\n    setLastUseNavigation(Navigation.Mouse);\n  }\n\n  function handleInputKeyDown(e: any) {\n    if (e.key === 'ArrowUp' || e.key === 'ArrowDown') e.preventDefault();\n  }\n\n  useHotkeys('up', () => {\n    if (selectedIdx > 0) {\n      setSelectedIdx(c => c -= 1);\n    }\n    setLastUseNavigation(Navigation.Keys);\n  }, { filter: () => true }, [selectedIdx]);\n\n  useHotkeys('down', () => {\n    if (selectedIdx < includedVisibleSources().length + notIncludedVisibleSources().length - 1) {\n      setSelectedIdx(c => c += 1);\n    }\n    setLastUseNavigation(Navigation.Keys);\n  }, { filter: () => true }, [selectedIdx, notIncludedVisibleSources, includedVisibleSources]);\n\n  useHotkeys('enter', () => {\n    if (selectedIdx >= includedVisibleSources().length) {\n      const idx = selectedIdx - includedVisibleSources().length;\n      toggleDocSource(notIncludedVisibleSources()[idx], false);\n    } else {\n      toggleDocSource(includedVisibleSources()[selectedIdx], true);\n    }\n  }, { filter: () => true }, [selectedIdx, notIncludedVisibleSources, includedVisibleSources]);\n\n  useEffect(() => {\n    setSelectedIdx(0);\n  }, [searchQuery]);\n\n  useEffect(() => {\n    // Split doc sources into two arrays - included doc sources and not included ones.\n    const sorted = docSources\n      .sort((a, b) => (a.isIncludedInSearch === b.isIncludedInSearch) ? 0 : a.isIncludedInSearch ? -1 : 1);\n    const firstNotIncluded = sorted.findIndex(ds => !ds.isIncludedInSearch);\n    if (firstNotIncluded === -1) {\n      setNotIncludedSources(sorted.sort((a, b) => a.name.localeCompare(b.name)));\n    } else {\n      let includedSlice = sorted.slice(0, firstNotIncluded);\n      includedSlice = includedSlice\n        .sort((a, b) => a.name.localeCompare(b.name));\n      setIncludedSources(includedSlice);\n\n      let notIncludedSlice = sorted.slice(firstNotIncluded);\n      notIncludedSlice = notIncludedSlice\n        .sort((a, b) => a.name.localeCompare(b.name));\n      setNotIncludedSources(notIncludedSlice);\n    }\n  }, []);\n\n  return (\n    <StyledModal\n      onCloseRequest={onCloseRequest}\n    >\n      <SearchWrapper>\n        <SearchImg/>\n        <SearchInput\n          autoFocus\n          onKeyDown={handleInputKeyDown}\n          placeholder=\"Python, JavaScript, Docker, etc\"\n          value={searchQuery}\n          onChange={e => setSearchQuery(e.target.value)}\n        />\n      </SearchWrapper>\n      <Content>\n        <DocsListHeader>\n          <HeaderText>\n            NAME\n          </HeaderText>\n          <HeaderText>\n            INCLUDE IN SEARCH\n          </HeaderText>\n        </DocsListHeader>\n\n        <DocsListsWrapper>\n          {includedVisibleSources().length > 0 &&\n            <DocsListIncluded>\n              {includedVisibleSources().map((ds, idx) => (\n                <DocRow\n                  key={idx}\n                  onMouseOver={() => handleDocRowMouseOver(idx, true)}\n                  onClick={() => toggleDocSource(ds, true)}\n                  isFocused={idx === selectedIdx}\n                  lastUsedNavigation={lastUsedNavigation}\n                >\n                  <DocName>{ds.name}</DocName>\n                  <DocToggle\n                    type=\"checkbox\"\n                    checked={ds.isIncludedInSearch}\n                    onChange={() => {}}\n                  />\n                </DocRow>\n              ))}\n            </DocsListIncluded>\n          }\n\n          {notIncludedVisibleSources().length > 0 &&\n            <DocsListNotIncluded>\n              {notIncludedVisibleSources().map((ds, idx) => (\n                <DocRow\n                  key={idx}\n                  onMouseOver={() => handleDocRowMouseOver(idx, false)}\n                  onClick={() => toggleDocSource(ds, false)}\n                  isFocused={idx === selectedIdx - includedVisibleSources().length}\n                  lastUsedNavigation={lastUsedNavigation}\n                >\n                  <DocName>{ds.name}</DocName>\n                  <DocToggle\n                    type=\"checkbox\"\n                    checked={ds.isIncludedInSearch}\n                    onChange={() => {}}\n                  />\n                </DocRow>\n              ))}\n            </DocsListNotIncluded>\n          }\n        </DocsListsWrapper>\n      </Content>\n    </StyledModal>\n  );\n}\n\nexport default DocsFilterModal;\n\n","/Users/vasekmlejnsky/Developer/devbook/src/Home/HotkeysPanel/GitHubCode/SearchHotkeysPanel.tsx",[],"/Users/vasekmlejnsky/Developer/devbook/src/components/Modal.tsx",[],"/Users/vasekmlejnsky/Developer/devbook/src/components/Select.tsx",[],"/Users/vasekmlejnsky/Developer/devbook/src/Home/HotkeysPanel/Panel.tsx",[],"/Users/vasekmlejnsky/Developer/devbook/src/hooks/useLockBodyScroll.ts",[],{"ruleId":"185","replacedBy":"186"},{"ruleId":"187","replacedBy":"188"},{"ruleId":"189","severity":1,"message":"190","line":763,"column":9,"nodeType":"191","messageId":"192","endLine":763,"endColumn":31},{"ruleId":"193","severity":1,"message":"194","line":832,"column":6,"nodeType":"195","endLine":832,"endColumn":38,"suggestions":"196"},{"ruleId":"193","severity":1,"message":"197","line":1289,"column":6,"nodeType":"195","endLine":1295,"endColumn":4,"suggestions":"198"},{"ruleId":"199","severity":1,"message":"200","line":531,"column":21,"nodeType":"201","messageId":"202","endLine":531,"endColumn":23},{"ruleId":"193","severity":1,"message":"203","line":552,"column":6,"nodeType":"195","endLine":552,"endColumn":43,"suggestions":"204"},{"ruleId":"205","severity":1,"message":"206","line":123,"column":74,"nodeType":"191","messageId":"207","endLine":123,"endColumn":84},{"ruleId":"205","severity":1,"message":"206","line":126,"column":45,"nodeType":"191","messageId":"207","endLine":126,"endColumn":55},{"ruleId":"208","severity":1,"message":"209","line":174,"column":25,"nodeType":"210","messageId":"211","endLine":174,"endColumn":26,"suggestions":"212"},{"ruleId":"193","severity":1,"message":"213","line":248,"column":6,"nodeType":"195","endLine":248,"endColumn":8,"suggestions":"214"},"no-native-reassign",["215"],"no-negated-in-lhs",["216"],"@typescript-eslint/no-unused-vars","'cacheScrollTopPosition' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'cancelSearchInDocPage'. Either include it or remove the dependency array.","ArrayExpression",["217"],"React Hook useEffect has a missing dependency: 'searchAll'. Either include it or remove the dependency array.",["218"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'highlights'. Either include it or remove the dependency array.",["219"],"@typescript-eslint/no-use-before-define","'Navigation' was used before it was defined.","noUseBeforeDefine","no-useless-escape","Unnecessary escape character: \\/.","Literal","unnecessaryEscape",["220","221"],"React Hook useEffect has a missing dependency: 'docSources'. Either include it or remove the dependency array.",["222"],"no-global-assign","no-unsafe-negation",{"desc":"223","fix":"224"},{"desc":"225","fix":"226"},{"desc":"227","fix":"228"},{"messageId":"229","fix":"230","desc":"231"},{"messageId":"232","fix":"233","desc":"234"},{"desc":"235","fix":"236"},"Update the dependencies array to be: [state.results, focusResultItem, cancelSearchInDocPage]",{"range":"237","text":"238"},"Update the dependencies array to be: [debouncedQuery, debouncedLastSearchedQuery, activeFilter, state.gitHubAccount.isConnected, state.docSources, searchAll]",{"range":"239","text":"240"},"Update the dependencies array to be: [setHighlights, debouncedSearchQuery, highlights]",{"range":"241","text":"242"},"removeEscape",{"range":"243","text":"244"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"245","text":"246"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [docSources]",{"range":"247","text":"248"},[20007,20039],"[state.results, focusResultItem, cancelSearchInDocPage]",[35510,35644],"[debouncedQuery, debouncedLastSearchedQuery, activeFilter, state.gitHubAccount.isConnected, state.docSources, searchAll]",[13753,13790],"[setHighlights, debouncedSearchQuery, highlights]",[3550,3551],"",[3550,3550],"\\",[6239,6241],"[docSources]"]